!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),o=n(2);function i(e,t,n){const r=e.createShader(t);if(e.shaderSource(r,n),e.compileShader(r),!e.getShaderParameter(r,e.COMPILE_STATUS)){const t=e.getShaderInfoLog(r);throw alert("An error occurred compiling the shaders: "+t),e.deleteShader(r),t}return r}class s{constructor(e){this.gl=e,this.mouseY=0,this.mouseX=0,this.offsetY=0,this.offsetX=0,this.scale=1,this.shaderProgram=function(e,t,n){const r=i(e,e.VERTEX_SHADER,t),o=i(e,e.FRAGMENT_SHADER,n),s=e.createProgram();if(e.attachShader(s,r),e.attachShader(s,o),e.linkProgram(s),!e.getProgramParameter(s,e.LINK_STATUS)){const t=e.getProgramInfoLog(s);throw alert("Unable to initialize the shader program: "+t),t}return s}(e,o.default,r.default),e.useProgram(this.shaderProgram),this.uOffset=e.getUniformLocation(this.shaderProgram,"uOffset"),this.uScale=e.getUniformLocation(this.shaderProgram,"uScale"),this.uResolution=e.getUniformLocation(this.shaderProgram,"uResolution");const t=function(e,t){var n=e.createBuffer();return e.bindBuffer(e.ARRAY_BUFFER,n),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),n}(e,[-1,1,1,1,-1,-1,1,-1]),n=function(e,t){var n=e.createBuffer();return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Int16Array(t),e.STATIC_DRAW),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),n}(e,[0,2,1,1,2,3]),s=e.getAttribLocation(this.shaderProgram,"aPosition");e.bindBuffer(e.ARRAY_BUFFER,t),e.enableVertexAttribArray(s),e.vertexAttribPointer(s,2,e.FLOAT,!1,0,0),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)}resize(e,t){const n=this.gl;n.canvas.height=e,n.canvas.width=t,n.viewport(0,0,n.canvas.width,n.canvas.height),this.mouseY=e/2,this.mouseX=t/2}mousemove(e,t){this.mouseY=e,this.mouseX=t}step(){const e=this.gl,t=(e.canvas.height/2-this.mouseY)/Math.min(e.canvas.height,e.canvas.width),n=(this.mouseX-e.canvas.width/2)/Math.min(e.canvas.height,e.canvas.width);this.scale,this.offsetY,this.scale,this.offsetX;this.offsetY+=t*this.scale*(1-.95),this.offsetX+=n*this.scale*(1-.95),this.scale*=.95,e.clear(e.COLOR_BUFFER_BIT),e.uniform2fv(this.uOffset,[this.offsetX,this.offsetY]),e.uniform1f(this.uScale,this.scale),e.uniform2fv(this.uResolution,[e.canvas.width,e.canvas.height]),e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0),e.flush()}}window.addEventListener("DOMContentLoaded",()=>{const e=document.body,t=document.getElementById("canvas").getContext("webgl");if(!t)throw alert("WebGL is not supported on your browser"),null;const n=new s(t),r=()=>{n.resize(e.clientHeight,e.clientWidth)};r(),window.addEventListener("resize",e=>{r()}),window.addEventListener("mousemove",e=>{(e=>{n.mousemove(e.y,e.x)})(e)});setInterval(()=>{n.step()},100)})},function(e,t,n){"use strict";n.r(t),t.default="precision mediump float;\n#define GLSLIFY 1\nuniform vec2 uOffset;\nuniform float uScale;\nuniform vec2  uResolution;\n\nvoid main(void){\n    vec2 p = (gl_FragCoord.xy - uResolution / 2.0) / min(uResolution.x, uResolution.y);\n    vec2 c = p * uScale + uOffset;\n    vec2 z = vec2(0, 0);\n    int cnt = 0;\n    for (int i = 0; i < 100; ++ i) {\n        ++ cnt;\n        if (length(z) > 5.0) break;\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n    }\n    float t = float(cnt) / 100.0;\n    gl_FragColor = vec4(t, t, t, 1.0);\n}\n"},function(e,t,n){"use strict";n.r(t),t.default="#define GLSLIFY 1\nattribute vec2 aPosition;\n\nvoid main(void){\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n}\n"}]);